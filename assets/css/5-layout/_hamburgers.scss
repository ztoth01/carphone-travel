@charset "UTF-8";
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */

// Settings
// ==================================================
$hamburger-padding-x                       : 18px !default;
$hamburger-padding-y                       : 11px !default;
$hamburger-layer-width                     : 37px !default;
$hamburger-layer-height                    : 3px !default;
$hamburger-layer-spacing                   : 6px !default;
$hamburger-layer-color                     : $white !default;
$hamburger-layer-color-not-collapsed       : $black !default;
$hamburger-layer-border-radius             : 0px !default;
$hamburger-hover-opacity                   : 1 !default;
$hamburger-hover-transition-duration       : 0.15s !default;
$hamburger-hover-transition-timing-function: linear !default;

// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter    : opacity(10%) !default;

// Types (Remove or comment out what you donâ€™t need)
// ==================================================
$hamburger-types: (
  slider
) !default;

// Base Hamburger (We need this)
// ==================================================
// Hamburger
// ==================================================
.hamburger {
  padding: $hamburger-padding-y $hamburger-padding-x;
  display: inline-block;
  cursor: pointer;

  transition-property: opacity, filter, background;
  transition-duration: $hamburger-hover-transition-duration;
  transition-timing-function: $hamburger-hover-transition-timing-function;
  
  border-radius: 27px;

  // Normalize (<button>)
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;
  
  @include media($lgBelow) {
	  width: 64px;
    height: 64px;
    border-radius: 100%;
    padding: 22px 0;
  }

  &--inverse-bg {
		background: $mariner;
		
		@include media($mdBelow) {
			display: none;
		}
	}
  
  &:focus {
	  outline: none;
	  box-shadow: none;
  }
  
  &:not(.collapsed) {
		.hamburger-inner {
			&,
		  &::before,
		  &::after {
		    background-color: $hamburger-layer-color-not-collapsed;
		  }
		}
		
		.hamburger-title {
			color: $hamburger-layer-color-not-collapsed;
			display: none;
		}
		
		&.hamburger--inverse-bg {
		  background: transparent;
		  
		  @include media($mdBelow) {
				display: block;
			}
	  }
	}
}

.hamburger-box {
  width: $hamburger-layer-width;
  height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
  display: inline-block;
  position: relative;
}

.hamburger-title {
	font-size: 20px;
	line-height: 32px;
	color: $hamburger-layer-color;
	text-transform: uppercase;
	margin-right: 10px;
	vertical-align: bottom;
	display: none;
	
	@include media($lg) {
		display: inline-block;
	}
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: $hamburger-layer-height / -2;

  &,
  &::before,
  &::after {
    width: $hamburger-layer-width;
    height: $hamburger-layer-height;
    background-color: $hamburger-layer-color;
    border-radius: $hamburger-layer-border-radius;
    position: absolute;
    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease;
  }

  &::before,
  &::after {
    content: "";
    display: block;
  }

  &::before {
    top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }

  &::after {
    bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
  }
}

// Hamburger types
// ==================================================
@if index($hamburger-types, slider) {
  /*
   * Slider
   */
  .hamburger--slider {
    .hamburger-inner {
      top: $hamburger-layer-height / 2;

      &::before {
        top: $hamburger-layer-height + $hamburger-layer-spacing;
        transition-property: transform, opacity;
        transition-timing-function: ease;
        transition-duration: 0.15s;
      }

      &::after {
        top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
      }
    }

    &:not(.collapsed) {
      .hamburger-inner {
        $y-offset: $hamburger-layer-spacing + $hamburger-layer-height;

        transform: translate3d(0, $y-offset, 0) rotate(45deg);

        &::before {
          transform: rotate(-45deg) translate3d($hamburger-layer-width / -7, $hamburger-layer-spacing * -1, 0);
          opacity: 0;
        }

        &::after {
          transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
        }
      }
    }
  }
}
